# When a PR is merged into main, determine the next semver release based on conventional commits,
# cut a GitHub release and build a push a Docker image into ECR.
name: auto-releaser
on:
  push:
    branches: main

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    env:
      SERVICE_NAME: user-mgmt-service-api

    steps:
      - name: Clone git repo
        uses: actions/checkout@v4

      # Calculate the next semantic version based on the conventional git commits
      # Create a GitHub release if required
      # https://github.com/googleapis/release-please-action
      - name: Create GitHub release
        uses: googleapis/release-please-action@v4
        id: releaser
        with:
          # We cannot use the default GITHUB_TOKEN as this user does not trigger workflows automatically
          # Required so that the release workflow runs once we have merged the release PR
          token: ${{ secrets.GH_PAT }}
          release-type: go

      - name: setup-go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build Go binaries
        if: ${{ steps.releaser.outputs.release_created }}
        env:
          BUILD_VERSION: ${{ steps.releaser.outputs.tag_name }}
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-X main.BuildVersion=${{ env.BUILD_VERSION }}" -o ${{env.SERVICE_NAME }}-linux-amd64 ./cmd/main.go
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-X main.BuildVersion=${{ env.BUILD_VERSION }}" -o ${{env.SERVICE_NAME }}-linux-arm64 ./cmd/main.go
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-X main.BuildVersion=${{ env.BUILD_VERSION }}" -o ${{env.SERVICE_NAME }}-darwin-amd64 ./cmd/main.go
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-X main.BuildVersion=${{ env.BUILD_VERSION }}" -o ${{env.SERVICE_NAME }}-darwin-arm64 ./cmd/main.go

      - name: Upload release artifacts
        if: ${{ steps.releaser.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.releaser.outputs.tag_name }} ${{env.SERVICE_NAME }}-linux-amd64
          gh release upload ${{ steps.releaser.outputs.tag_name }} ${{env.SERVICE_NAME }}-linux-arm64
          gh release upload ${{ steps.releaser.outputs.tag_name }} ${{env.SERVICE_NAME }}-darwin-amd64
          gh release upload ${{ steps.releaser.outputs.tag_name }} ${{env.SERVICE_NAME }}-darwin-arm64