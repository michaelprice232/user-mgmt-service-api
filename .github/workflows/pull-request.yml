# Build and push Docker image and then run E2E tests in AWS when raising a PR against the main branch
# Other tests will also be triggered from the ci.yml workflow
name: PR against main
on:
  pull_request:
    branches:
      - main

permissions:
  id-token: write   # required for requesting the JWT
  contents: read    # required for actions/checkout

jobs:
  e2e-tests:
    runs-on: ubuntu-latest

    env:
      AWS_REGION : "eu-west-2"

    steps:
      - name: Clone git repo
        uses: actions/checkout@v4

      # Use OIDC rather than long-lived IAM credentials. OIDC provider and IAM role needs to be configured in AWS
      # https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::633681147894:role/gh-actions-user-mgmt-service-api-workflow
          role-session-name: GHActions-user-mgmt-service-api
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Required for multi-platform builds
      # Using the "Cross Compilation" method rather than emulation. See Dockerfile variables
      # https://docs.docker.com/build/ci/github-actions/multi-platform/
      # https://docs.docker.com/build/building/multi-platform/#cross-compiling-a-go-application
      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: Build & push multi-architecture Docker image for app
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: user-mgmt-service-api
          IMAGE_TAG: ${{ github.sha }}
          ARCHITECTURES: linux/amd64,linux/arm64
        run: |
          BUILD_VERSION=$(git rev-parse --short HEAD)
          docker build --platform $ARCHITECTURES -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg BUILD_VERSION=$BUILD_VERSION .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo Pushed $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Required when using emulation rather than cross compilation for multi-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build & push multi-architecture Docker image for db seeding
        id: db-seeding-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: user-mgmt-service-api
          IMAGE_TAG: ${{ github.sha }}-db-seeding
          ARCHITECTURES: linux/amd64,linux/arm64
        run: |
          docker buildx build --platform $ARCHITECTURES -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./db-seed/Dockerfile-db-seed --push .
          echo Pushed $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: setup-go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: E2E tests
        env:
          DOCKER_APP_IMAGE: ${{ steps.db-seeding-image.outputs.image }}
        run: go test -tags=e2e -count=1 -v -timeout 60m ./tests/e2e

          
          
